Mutation:
    type: object
    config:
        fields:
            createUser:
                type: "String"
                resolve: "@=mutation('createUser', [validator])"
                args:
                    username:
                        type: String!
                        validation:
                            - Length:
                                min: 6
                                max: 32
                                minMessage: 'createUser.username.not_blank'  # will be translated
                            - NotBlank:
                                message: 'Something is empty'
                    password:
                        type: String!
                        validation:
                            - Length: { min: 6, max: 32 }
                            - IdenticalTo:
                                  propertyPath: 'passwordRepeat'
                                  message: 'Passwords are not equal!'
                    passwordRepeat:
                        type: String!
                    birthday:
                        type: String!
                        validation:
                            - Date: ~
                            - Callback:
                                callback: ['App\Util\Validator', 'greaterThan']
                                payload: -18 years
                    emails:
                        type: '[String]'
                        validation:
                            - Unique: ~
                            - Count: { max: 3 }
                            - All:
                                - Email:
                                    message: 'The email "{{ value }}" is not a valid email.'
                    about:
                        type: String!
                        validation:
                            - NotBlank: ~
                    extraConfig:
                        type: String!
                        validation:
                            - Json: ~
                    address:
                        type: Address
                        validation: cascade
                    workPeriod:
                        type: Period!
                        validation: cascade
                    university:
                        type: University
                        validation: cascade

Period:
    type: input-object
    config:
        fields:
            startDate:
                type: String!
                validation:
                    - Date: ~
            endDate:
                type: String!
                validation:
                    - Date: ~
                    - GreaterThan:
                          propertyPath: 'startDate'

Address:
    type: input-object
    config:
        fields:
            street:
                type: String!
                validation:
                    - Length:
                          min: 10
                          minMessage: 'The street value should have minimum 10 characters'
            city:
                type: String!
                validation:
                    - Choice:
                        choices: ['New York', 'Berlin', 'Tokyo']
                        message: 'You can only choose between Berlin, New York and Tokyo'
            zipCode:
                type: Int!
                validation:
                    - Positive: ~
            residents:
                type: '[String!]'
                validation:
                    - Expression: "'murtukov' in value && this.getParent().getType() === 'Mutation'"

University:
    type: input-object
    config:
        fields:
            title:
                type: String
                validation: 'App\Entity\University::title'     # property and all getters
            address:
                type: String
                validation: 'App\Entity\University::$address'  # only property
            phone:
                type: String
                validation: 'App\Entity\University::$phone'    # only property
            country:
                type: String
                validation: 'App\Entity\University::country()' # all getters: getCounty(), isCountry(), hasCountry()
